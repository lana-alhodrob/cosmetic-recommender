# -*- coding: utf-8 -*-
"""final_app_cosmetics

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12YPbGHu19fWnJ-2ssEHbTQZ0y7sAFWgQ
"""



!pip install streamlit
import streamlit as st
import pandas as pd

# Load your dataset here

df = pd.read_csv('cosmetics.csv')

ingredient_problem_map = {
    'acne': ['salicylic acid', 'benzoyl peroxide', 'niacinamide', 'tea tree oil'],
    'dryness': ['hyaluronic acid', 'glycerin', 'ceramides', 'squalane', 'shea butter'],
    'redness': ['niacinamide', 'centella asiatica', 'licorice extract', 'chamomile'],
    'aging': ['retinol', 'vitamin c', 'peptides', 'hyaluronic acid', 'niacinamide'],
    'dark spots': ['vitamin c', 'niacinamide', 'alpha arbutin', 'kojic acid'],
    'oiliness': ['niacinamide', 'salicylic acid', 'clay', 'zinc']
}

def recommend_products(product_types, brands, skin_types, problems, max_price, top_n):
    filtered_df = df.copy()

    if product_types:
        filtered_df = filtered_df[filtered_df['label'].isin(product_types)]


    if skin_types:
        skin_type_filters = []
        for stype in skin_types:
            if stype in filtered_df.columns:
                skin_type_filters.append(filtered_df[stype] == 1)
        if skin_type_filters:
            combined = skin_type_filters[0]
            for f in skin_type_filters[1:]:
                combined |= f
            filtered_df = filtered_df[combined]

    if problems:
        ingredients = []
        for problem in problems:
            ingredients.extend(ingredient_problem_map.get(problem.lower(), []))
        ingredients = set([i.lower() for i in ingredients])
        if ingredients:
            filtered_df = filtered_df[filtered_df['ingredients'].apply(
                lambda x: any(ing in x.lower() for ing in ingredients) if pd.notna(x) else False
            )]

    filtered_df = filtered_df[filtered_df['price'] <= max_price]
    filtered_df = filtered_df.sort_values(by='rank')
    return filtered_df[['brand', 'name', 'label', 'price', 'rank', 'ingredients']].head(top_n)


# --- Streamlit UI ---
st.title("Cosmetic Product Recommender")

product_types = st.multiselect("Select Product Types", ['Moisturizer', 'Cleanser', 'Treatment', 'Face Mask', 'Eye cream', 'Sun protect'])
skin_types = st.multiselect("Select Skin Types", ['oily', 'sensitive', 'dry', 'normal', 'combination'])
problems = st.multiselect("Select Skin Problems", list(ingredient_problem_map.keys()))
max_price = st.slider("Select Maximum Price", 0, 500, 100)
top_n = st.slider("Number of Recommendations", 1, 20, 5)

if st.button("Get Recommendations"):
    results = recommend_products(product_types, brands, skin_types, problems, max_price, top_n)
    if results.empty:
        st.warning("No products found.")
    else:
        st.dataframe(results)

!streamlit run app.py